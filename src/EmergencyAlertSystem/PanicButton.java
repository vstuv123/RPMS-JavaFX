package EmergencyAlertSystem;

import Helper.Helper;
import UserManagement.Doctor;
import UserManagement.Patient;

import java.util.Objects;

import UserManagement.SessionStorage;
import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.Alert;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.layout.VBox;
import javafx.scene.paint.Color;
import javafx.scene.text.Font;
import javafx.scene.text.FontWeight;
import javafx.stage.Stage;

public class PanicButton extends Application {

    NotificationService ns = new NotificationService(); // Notification service to send emails

    @Override
    public void start(Stage primaryStage) {

        // Get the currently logged-in patient
        Patient patient = (Patient) SessionStorage.loggedInUser;

        // Fetch the doctor assigned to the patient
        Doctor doctor = Objects.requireNonNull(Helper.fetchDoctor(patient.getAssignedTo()));

        // Create a title label for the window
        Label titleLabel = new Label("Panic Button");
        titleLabel.setFont(Font.font("Arial", FontWeight.BOLD, 30));
        titleLabel.setTextFill(Color.RED);

        // Informational note displayed below the title
        Label noteLabel = new Label(
                "In case of a medical emergency, press the button below.\n\n" +
                        "- An immediate alert will be sent to your assigned doctor.\n" +
                        "- Your emergency contact and will be notified.\n" +
                        "Please use this feature only for real emergencies."
        );
        noteLabel.setFont(Font.font("Arial", 16));
        noteLabel.setWrapText(true);
        noteLabel.setTextFill(Color.DARKBLUE);

        // Create the emergency panic button
        Button panicButton = new Button("Trigger Emergency Alert ðŸš¨");
        panicButton.setFont(Font.font("Arial", FontWeight.BOLD, 18));
        panicButton.setStyle("-fx-background-color: red; -fx-text-fill: white; -fx-background-radius: 10;");
        panicButton.setPadding(new Insets(10, 20, 10, 20));

        // Define what happens when the panic button is clicked
        panicButton.setOnAction(e -> {
            // Construct the message to be sent to the doctor
            String doctorMessage = "Dear Dr. " + doctor.getName() + ",\n" +
                    "\n" +
                    "This is an automated emergency alert regarding your patient, " + patient.getName() + " (ID: " + patient.getUnique_id() + ").\n" +
                    "\n" +
                    "An emergency event has been triggered by the patient or detected by the system. Immediate attention is required.\n" +
                    "\n" +
                    "Patient Details:\n" +
                    "- Name: " + patient.getName() + "\n" +
                    "- Date of Birth: " + patient.getDob() + "\n" +
                    "- Contact Number: " + patient.getContactNumber() + "\n" +
                    "- Current Address: " + patient.getAddress() + "\n" +
                    "\n" +
                    "Action Required:\n" +
                    "Please attempt to contact the patient immediately and take necessary medical actions.\n" +
                    "\n" +
                    "Regards,  \n" +
                    "RPMS  \n" +
                    "Automated Emergency Response System\n";

            // Construct the message to be sent to the emergency contact
            String emergencyEmailMessage = "Dear " + patient.getEmergencyEmail() + ",\n" +
                    "\n" +
                    "This is an emergency notification concerning " + patient.getName() + ".\n" +
                    "\n" +
                    "An urgent situation has been detected, and immediate attention is required.\n" +
                    "\n" +
                    "Patient Details:\n" +
                    "- Name: " + patient.getName() + "\n" +
                    "- Date of Birth: " + patient.getDob() + "\n" +
                    "- Contact Number: " + patient.getContactNumber() + "\n" +
                    "- Last Known Address: " + patient.getAddress() + "\n" +
                    "\n" +
                    "Recommended Actions:\n" +
                    "- Please attempt to reach the patient immediately.\n" +
                    "- If needed, coordinate with medical services.\n" +
                    "\n" +
                    "Stay calm and act promptly.  \n" +
                    "This alert was automatically generated by RPMS.\n" +
                    "\n" +
                    "Thank you,  \n" +
                    "Automated Emergency Response System\n";

            // Send email notifications to doctor and emergency contact
            ns.sendEmail(doctor.getEmail(), "[URGENT] Emergency Alert for Patient: " + patient.getName(), doctorMessage);
            ns.sendEmail(patient.getEmergencyEmail(), "[EMERGENCY] Immediate Attention Needed for " + patient.getName(), emergencyEmailMessage);

            // Show a confirmation alert to the user
            Alert alert = new Alert(Alert.AlertType.INFORMATION);
            alert.setTitle("Emergency Alert Sent");
            alert.setHeaderText("Emergency notification successfully sent!");
            alert.setContentText("The doctor and the emergency contact have been notified.");
            alert.showAndWait();
        });

        // Create a vertical layout and add components
        VBox vbox = new VBox(20, titleLabel, noteLabel, panicButton);
        vbox.setAlignment(Pos.CENTER);
        vbox.setPadding(new Insets(30));
        vbox.setStyle("-fx-background-color: #f0f8ff;");

        // Set up and display the scene
        Scene scene = new Scene(vbox, 600, 500);
        primaryStage.setTitle("Panic Button");
        primaryStage.setScene(scene);
        primaryStage.show();
    }
}